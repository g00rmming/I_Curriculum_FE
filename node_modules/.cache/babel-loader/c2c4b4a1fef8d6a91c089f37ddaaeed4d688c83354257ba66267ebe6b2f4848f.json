{"ast":null,"code":"export default {\n  name: 'RealTimeClock',\n  data() {\n    return {\n      currentTime: this.getCurrentTime()\n    };\n  },\n  methods: {\n    getCurrentTime() {\n      const now = new Date();\n      const year = now.getFullYear();\n      const month = String(now.getMonth() + 1).padStart(2, '0');\n      const day = String(now.getDate()).padStart(2, '0');\n      let hours = now.getHours();\n      //const hours = String(now.getHours()).padStart(2, '0');\n      const minutes = String(now.getMinutes()).padStart(2, '0');\n      const seconds = String(now.getSeconds()).padStart(2, '0');\n\n      // 오전/오후 표시를 위한 로직 추가\n      const ampm = hours >= 12 ? '오후' : '오전';\n      hours %= 12;\n      hours = hours || 12; // 0시는 12시로 표시\n\n      return `${year}년 ${month}월 ${day}일 ${ampm} ${hours}:${minutes}:${seconds}`;\n    },\n    sendToParent() {\n      // 'messageFromChild' 이벤트를 emit하여 부모 컴포넌트에 데이터를 보냅니다.\n      this.$emit('messageFromChild', this.getCurrentTime());\n    }\n  },\n  mounted() {\n    this.updateInterval = setInterval(() => {\n      this.currentTime = this.getCurrentTime();\n    }, 1000); // 매 1초마다 업데이트합니다.\n  },\n  beforeUnmount() {\n    clearInterval(this.updateInterval);\n  }\n};","map":{"version":3,"names":["name","data","currentTime","getCurrentTime","methods","now","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","ampm","sendToParent","$emit","mounted","updateInterval","setInterval","beforeUnmount","clearInterval"],"sources":["/Users/gimdongha/Desktop/cloudcomputing/i-curriculum_FE/src/components/realtime/RealTimeClock.vue"],"sourcesContent":["<template>\r\n    <div class=\"inline-block\" >\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-tabler icon-tabler-clock-hour-9\" width=\"24\" height=\"24\"\r\n            viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\"\r\n            stroke-linejoin=\"round\">\r\n            <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"></path>\r\n            <path d=\"M12 12m-9 0a9 9 0 1 0 18 0a9 9 0 1 0 -18 0\"></path>\r\n            <path d=\"M12 12h-3.5\"></path>\r\n            <path d=\"M12 7v5\"></path>\r\n        </svg>\r\n        {{ currentTime }}\r\n\r\n        <!-- <a @click=\"sendToParent\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-tabler icon-tabler-clock-hour-9\"\r\n                width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\"\r\n                stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n                <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"></path>\r\n                <path d=\"M12 12m-9 0a9 9 0 1 0 18 0a9 9 0 1 0 -18 0\"></path>\r\n                <path d=\"M12 12h-3.5\"></path>\r\n                <path d=\"M12 7v5\"></path>\r\n            </svg>\r\n        </a> -->\r\n\r\n    </div>\r\n</template>\r\n  \r\n<script>\r\nexport default {\r\n    name: 'RealTimeClock',\r\n    data() {\r\n        return {\r\n            currentTime: this.getCurrentTime()\r\n        };\r\n    },\r\n    methods: {\r\n        getCurrentTime() {\r\n            const now = new Date();\r\n            const year = now.getFullYear();\r\n            const month = String(now.getMonth() + 1).padStart(2, '0');\r\n            const day = String(now.getDate()).padStart(2, '0');\r\n            let hours = now.getHours();\r\n            //const hours = String(now.getHours()).padStart(2, '0');\r\n            const minutes = String(now.getMinutes()).padStart(2, '0');\r\n            const seconds = String(now.getSeconds()).padStart(2, '0');\r\n\r\n            // 오전/오후 표시를 위한 로직 추가\r\n            const ampm = hours >= 12 ? '오후' : '오전';\r\n            hours %= 12;\r\n            hours = hours || 12; // 0시는 12시로 표시\r\n\r\n\r\n            return `${year}년 ${month}월 ${day}일 ${ampm} ${hours}:${minutes}:${seconds}`;\r\n        },\r\n        sendToParent() {\r\n            // 'messageFromChild' 이벤트를 emit하여 부모 컴포넌트에 데이터를 보냅니다.\r\n            this.$emit('messageFromChild', this.getCurrentTime());\r\n        }\r\n    },\r\n    mounted() {\r\n        this.updateInterval = setInterval(() => {\r\n            this.currentTime = this.getCurrentTime();\r\n        }, 1000); // 매 1초마다 업데이트합니다.\r\n    },\r\n    beforeUnmount() {\r\n        clearInterval(this.updateInterval);\r\n    }\r\n};\r\n</script>\r\n  "],"mappings":"AA0BA,eAAe;EACXA,IAAI,EAAE,eAAe;EACrBC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,WAAW,EAAE,IAAI,CAACC,cAAc,CAAC;IACrC,CAAC;EACL,CAAC;EACDC,OAAO,EAAE;IACLD,cAAcA,CAAA,EAAG;MACb,MAAME,GAAE,GAAI,IAAIC,IAAI,CAAC,CAAC;MACtB,MAAMC,IAAG,GAAIF,GAAG,CAACG,WAAW,CAAC,CAAC;MAC9B,MAAMC,KAAI,GAAIC,MAAM,CAACL,GAAG,CAACM,QAAQ,CAAC,IAAI,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;MACzD,MAAMC,GAAE,GAAIH,MAAM,CAACL,GAAG,CAACS,OAAO,CAAC,CAAC,CAAC,CAACF,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;MAClD,IAAIG,KAAI,GAAIV,GAAG,CAACW,QAAQ,CAAC,CAAC;MAC1B;MACA,MAAMC,OAAM,GAAIP,MAAM,CAACL,GAAG,CAACa,UAAU,CAAC,CAAC,CAAC,CAACN,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;MACzD,MAAMO,OAAM,GAAIT,MAAM,CAACL,GAAG,CAACe,UAAU,CAAC,CAAC,CAAC,CAACR,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;;MAEzD;MACA,MAAMS,IAAG,GAAIN,KAAI,IAAK,EAAC,GAAI,IAAG,GAAI,IAAI;MACtCA,KAAI,IAAK,EAAE;MACXA,KAAI,GAAIA,KAAI,IAAK,EAAE,EAAE;;MAGrB,OAAO,GAAGR,IAAI,KAAKE,KAAK,KAAKI,GAAG,KAAKQ,IAAI,IAAIN,KAAK,IAAIE,OAAO,IAAIE,OAAO,EAAE;IAC9E,CAAC;IACDG,YAAYA,CAAA,EAAG;MACX;MACA,IAAI,CAACC,KAAK,CAAC,kBAAkB,EAAE,IAAI,CAACpB,cAAc,CAAC,CAAC,CAAC;IACzD;EACJ,CAAC;EACDqB,OAAOA,CAAA,EAAG;IACN,IAAI,CAACC,cAAa,GAAIC,WAAW,CAAC,MAAM;MACpC,IAAI,CAACxB,WAAU,GAAI,IAAI,CAACC,cAAc,CAAC,CAAC;IAC5C,CAAC,EAAE,IAAI,CAAC,EAAE;EACd,CAAC;EACDwB,aAAaA,CAAA,EAAG;IACZC,aAAa,CAAC,IAAI,CAACH,cAAc,CAAC;EACtC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}