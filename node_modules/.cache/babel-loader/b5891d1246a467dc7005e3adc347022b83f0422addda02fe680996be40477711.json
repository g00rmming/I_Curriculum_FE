{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, createStaticVNode as _createStaticVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"inline-block\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createStaticVNode(\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"icon icon-tabler icon-tabler-clock-hour-9\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" stroke-width=\\\"2\\\" stroke=\\\"currentColor\\\" fill=\\\"none\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\"><path stroke=\\\"none\\\" d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"></path><path d=\\\"M12 12m-9 0a9 9 0 1 0 18 0a9 9 0 1 0 -18 0\\\"></path><path d=\\\"M12 12h-3.5\\\"></path><path d=\\\"M12 7v5\\\"></path></svg>\", 1);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createTextVNode(\" \" + _toDisplayString($data.currentTime), 1)]);\n}","map":{"version":3,"names":["class","_createStaticVNode","_createElementBlock","_hoisted_1","_hoisted_2","_createTextVNode","_toDisplayString","$data","currentTime"],"sources":["/Users/gimdongha/Desktop/cloudcomputing/i-curriculum_FE/src/components/realtime/RealTimeClock.vue"],"sourcesContent":["<template>\r\n    <div class=\"inline-block\" >\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-tabler icon-tabler-clock-hour-9\" width=\"24\" height=\"24\"\r\n            viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\"\r\n            stroke-linejoin=\"round\">\r\n            <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"></path>\r\n            <path d=\"M12 12m-9 0a9 9 0 1 0 18 0a9 9 0 1 0 -18 0\"></path>\r\n            <path d=\"M12 12h-3.5\"></path>\r\n            <path d=\"M12 7v5\"></path>\r\n        </svg>\r\n        {{ currentTime }}\r\n\r\n        <!-- <a @click=\"sendToParent\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-tabler icon-tabler-clock-hour-9\"\r\n                width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\"\r\n                stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n                <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"></path>\r\n                <path d=\"M12 12m-9 0a9 9 0 1 0 18 0a9 9 0 1 0 -18 0\"></path>\r\n                <path d=\"M12 12h-3.5\"></path>\r\n                <path d=\"M12 7v5\"></path>\r\n            </svg>\r\n        </a> -->\r\n\r\n    </div>\r\n</template>\r\n  \r\n<script>\r\nexport default {\r\n    name: 'RealTimeClock',\r\n    data() {\r\n        return {\r\n            currentTime: this.getCurrentTime()\r\n        };\r\n    },\r\n    methods: {\r\n        getCurrentTime() {\r\n            const now = new Date();\r\n            const year = now.getFullYear();\r\n            const month = String(now.getMonth() + 1).padStart(2, '0');\r\n            const day = String(now.getDate()).padStart(2, '0');\r\n            let hours = now.getHours();\r\n            //const hours = String(now.getHours()).padStart(2, '0');\r\n            const minutes = String(now.getMinutes()).padStart(2, '0');\r\n            const seconds = String(now.getSeconds()).padStart(2, '0');\r\n\r\n            // 오전/오후 표시를 위한 로직 추가\r\n            const ampm = hours >= 12 ? '오후' : '오전';\r\n            hours %= 12;\r\n            hours = hours || 12; // 0시는 12시로 표시\r\n\r\n\r\n            return `${year}년 ${month}월 ${day}일 ${ampm} ${hours}:${minutes}:${seconds}`;\r\n        },\r\n        sendToParent() {\r\n            // 'messageFromChild' 이벤트를 emit하여 부모 컴포넌트에 데이터를 보냅니다.\r\n            this.$emit('messageFromChild', this.getCurrentTime());\r\n        }\r\n    },\r\n    mounted() {\r\n        this.updateInterval = setInterval(() => {\r\n            this.currentTime = this.getCurrentTime();\r\n        }, 1000); // 매 1초마다 업데이트합니다.\r\n    },\r\n    beforeUnmount() {\r\n        clearInterval(this.updateInterval);\r\n    }\r\n};\r\n</script>\r\n  "],"mappings":";;EACSA,KAAK,EAAC;AAAc;gCAD7BC,kBAAA;;uBACIC,mBAAA,CAqBM,OArBNC,UAqBM,GApBFC,UAOM,EATdC,gBAAA,CASc,GACN,GAAAC,gBAAA,CAAGC,KAAA,CAAAC,WAAW,M","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}