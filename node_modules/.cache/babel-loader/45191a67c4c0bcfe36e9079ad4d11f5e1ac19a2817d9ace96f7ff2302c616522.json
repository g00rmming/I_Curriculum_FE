{"ast":null,"code":"import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 1\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h1\", null, [/*#__PURE__*/_createTextVNode(\"Loading\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"animated-dots\"\n})], -1 /* HOISTED */);\nconst _hoisted_3 = [_hoisted_2];\nconst _hoisted_4 = {\n  key: 2,\n  class: \"col-12\"\n};\nconst _hoisted_5 = {\n  class: \"card card-md\"\n};\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"card-stamp card-stamp-lg\"\n}, [/*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"card-stamp-icon bg-primary\"\n}, [/*#__PURE__*/_createCommentVNode(\" 아이콘 또는 이미지 추가 \"), /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fas fa-robot\"\n})])], -1 /* HOISTED */);\nconst _hoisted_7 = {\n  class: \"card-body\"\n};\nconst _hoisted_8 = {\n  class: \"row align-items-center\"\n};\nconst _hoisted_9 = {\n  class: \"col-10\"\n};\nconst _hoisted_10 = /*#__PURE__*/_createElementVNode(\"h3\", {\n  class: \"page-title\"\n}, \"응답 결과\", -1 /* HOISTED */);\nconst _hoisted_11 = /*#__PURE__*/_createElementVNode(\"p\", null, null, -1 /* HOISTED */);\nconst _hoisted_12 = {\n  class: \"markdown\"\n};\nconst _hoisted_13 = [\"innerHTML\"];\nconst _hoisted_14 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"mt-3\"\n}, [/*#__PURE__*/_createCommentVNode(\" 추가 정보 \")], -1 /* HOISTED */);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.userInput = $event),\n    type: \"text\",\n    placeholder: \"희망 직종을 입력하세요. ex) 백엔드 개발자\",\n    class: \"form-control mb-3\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.userInput]]), _ctx.buttonVisible ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 0,\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.handleClick && $options.handleClick(...args)),\n    class: \"btn btn-primary mb-3\"\n  }, \"AI에게 과목 추천받기\")) : _createCommentVNode(\"v-if\", true), _ctx.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [..._hoisted_3])) : _createCommentVNode(\"v-if\", true), $data.promptResponse && !_ctx.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createElementVNode(\"div\", _hoisted_5, [_hoisted_6, _createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"div\", _hoisted_9, [_hoisted_10, _hoisted_11, _createElementVNode(\"div\", _hoisted_12, [_createElementVNode(\"p\", {\n    ref: \"responseText\",\n    innerHTML: $data.promptResponse\n  }, null, 8 /* PROPS */, _hoisted_13)]), _hoisted_14])])])])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["key","_createElementVNode","_createTextVNode","class","_hoisted_2","_createCommentVNode","_createElementBlock","_cache","$event","$data","userInput","type","placeholder","_ctx","buttonVisible","onClick","args","$options","handleClick","loading","_hoisted_1","_hoisted_3","promptResponse","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","ref","innerHTML","_hoisted_13","_hoisted_14"],"sources":["/Users/gimdongha/Desktop/cloudcomputing/i-curriculum_FE/src/views/coursemangent/component/RecommandSubject.vue"],"sourcesContent":["<template>\n     <div>\n        <input v-model=\"userInput\" type=\"text\" placeholder=\"희망 직종을 입력하세요. ex) 백엔드 개발자\" class=\"form-control mb-3\" />\n        <button v-if=\"buttonVisible\" @click=\"handleClick\" class=\"btn btn-primary mb-3\">AI에게 과목 추천받기</button>\n        <div v-if=\"loading\">\n          <h1>Loading<span class=\"animated-dots\"></span></h1>\n        </div>\n        <div v-if=\"promptResponse && !loading\" class=\"col-12\">\n          <div class=\"card card-md\">\n            <div class=\"card-stamp card-stamp-lg\">\n              <div class=\"card-stamp-icon bg-primary\">\n                <!-- 아이콘 또는 이미지 추가 -->\n                <i class=\"fas fa-robot\"></i>\n              </div>\n            </div>\n            <div class=\"card-body\">\n              <div class=\"row align-items-center\">\n                <div class=\"col-10\">\n                  <h3 class=\"page-title\">응답 결과</h3>\n                  <p></p>\n                  <div class=\"markdown\">\n                    <p ref=\"responseText\" v-html=\"promptResponse\"></p>\n                  </div>\n                  <div class=\"mt-3\">\n                    <!-- 추가 정보 -->\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n</template>\n\n<script>\n    export default {\n        data() {\n            return{\n                takeList : [],\n                takeString : \"\",\n                promptResponse:\"\",\n                prompt : \"\",\n                unTakeString : \"\",\n                unTakeList : [],\n                userInput: \"\"\n            }\n        },\n        mounted() {\n            this.fetchData();\n        },\n        methods: {\n            async fetchData() {\n      this.onLoading = true;\n      const userId = localStorage.getItem('memberId');\n      \n      try {\n        const takenCoursesResponse = await this.$axios.get('/v1/courses/take', {\n            params: { memberId: userId }\n        });\n        \n        const takenCoursesResult = takenCoursesResponse.data.result.takenCourseDTOList;\n        if (Array.isArray(takenCoursesResult)) {\n          this.takeList = takenCoursesResult;\n        } else {\n          console.error('받은 데이터가 배열이 아닙니다:', takenCoursesResult);\n        }\n\n        const untakenCoursesResponse = await this.$axios.get('/v1/courses/untake', {\n          params: { memberId: userId }\n        });\n\n        const untakenCoursesResult = untakenCoursesResponse.data.result.untakenCourseDTOList;\n        this.unTakeList = untakenCoursesResult.map(item => ({\n          hak: item.courseCode,\n          courseId: item.courseId,\n          name: item.courseName,\n          code: item.categoryName,\n          grade: item.credit,\n          year: item.level,\n          people: item.takenNumber\n        }));\n        \n      } catch (error) {\n        console.error('데이터 가져오기 실패:', error);\n      } finally {\n        this.onLoading = false;\n      }\n    },\n\n    generateTakeString() {\n      this.takeString = this.takeList\n        .filter(subject => subject.categoryName === \"전공필수\" || subject.categoryName === \"전공선택\")\n        .map(subject => subject.courseName)\n        .join(', ');\n    },\n\n    generateUnTakeString() {\n      this.unTakeString = this.unTakeList\n        .map(item => item.name)\n        .join(', ');\n    },\n\n    askToAi() {\n      const payload = {\n        prompt: this.prompt\n      };\n\n      this.$axios.post('/api', payload)\n        .then(response => {\n          this.promptResponse = response.data.output;\n          console.log('응답 받음:', this.promptResponse);\n          this.loading = false;\n        })\n        .catch(error => {\n          console.error('오류 발생:', error);\n          this.loading = false;\n        });\n    },\n\n    handleClick() {\n      if (!this.userInput.trim()) {\n        this.$swal(\"희망 직종을 입력하세요.\", '', \"warning\");\n        return;\n      }\n      this.loading = true;\n      this.generateTakeString();\n      this.generateUnTakeString();\n      this.prompt = `내가 ${this.userInput}이/가 되고싶은데 현재 수강한 과목들은 {${this.takeString}}이고 미수강 과목들은 {${this.unTakeString}|인데 어떤 과목을 들으면 좋을까? 수강과목들을 제외한 미수강 과목들에서 과목명 그대로 5개만 추천해줘.`;\n      this.askToAi();\n    }\n        }\n    }\n</script>"],"mappings":";;EAAAA,GAAA;AAAA;gCAKUC,mBAAA,CAAmD,a,aAL7DC,gBAAA,CAKc,SAAO,G,aAAAD,mBAAA,CAAmC;EAA7BE,KAAK,EAAC;AAAe,G;oBAAtCC,UAAmD,C;;EAL7DJ,GAAA;EAO+CG,KAAK,EAAC;;;EACtCA,KAAK,EAAC;AAAc;gCACvBF,mBAAA,CAKM;EALDE,KAAK,EAAC;AAA0B,I,aACnCF,mBAAA,CAGM;EAHDE,KAAK,EAAC;AAA4B,I,aACrCE,mBAAA,mBAAsB,E,aACtBJ,mBAAA,CAA4B;EAAzBE,KAAK,EAAC;AAAc,G;;EAGtBA,KAAK,EAAC;AAAW;;EACfA,KAAK,EAAC;AAAwB;;EAC5BA,KAAK,EAAC;AAAQ;iCACjBF,mBAAA,CAAiC;EAA7BE,KAAK,EAAC;AAAY,GAAC,OAAK;iCAC5BF,mBAAA,CAAO;;EACFE,KAAK,EAAC;AAAU;oBApBvC;iCAuBkBF,mBAAA,CAEM;EAFDE,KAAK,EAAC;AAAM,I,aACfE,mBAAA,WAAc,C;;uBAvB7BC,mBAAA,CA8BO,c,gBA7BJL,mBAAA,CAA2G;IAFnH,uBAAAM,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAEwBC,KAAA,CAAAC,SAAS,GAAAF,MAAA;IAAEG,IAAI,EAAC,MAAM;IAACC,WAAW,EAAC,2BAA2B;IAACT,KAAK,EAAC;iDAArEM,KAAA,CAAAC,SAAS,E,GACXG,IAAA,CAAAC,aAAa,I,cAA3BR,mBAAA,CAAoG;IAH5GN,GAAA;IAGsCe,OAAK,EAAAR,MAAA,QAAAA,MAAA,UAAAS,IAAA,KAAEC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;IAAEb,KAAK,EAAC;KAAuB,cAAY,KAHnGE,mBAAA,gBAImBQ,IAAA,CAAAM,OAAO,I,cAAlBb,mBAAA,CAEM,OANdc,UAAA,MAAAC,UAAA,MAAAhB,mBAAA,gBAOmBI,KAAA,CAAAa,cAAc,KAAKT,IAAA,CAAAM,OAAO,I,cAArCb,mBAAA,CAuBM,OAvBNiB,UAuBM,GAtBJtB,mBAAA,CAqBM,OArBNuB,UAqBM,GApBJC,UAKM,EACNxB,mBAAA,CAaM,OAbNyB,UAaM,GAZJzB,mBAAA,CAWM,OAXN0B,UAWM,GAVJ1B,mBAAA,CASM,OATN2B,UASM,GARJC,WAAiC,EACjCC,WAAO,EACP7B,mBAAA,CAEM,OAFN8B,WAEM,GADJ9B,mBAAA,CAAkD;IAA/C+B,GAAG,EAAC,cAAc;IAACC,SAAuB,EAAfxB,KAAA,CAAAa;0BArBlDY,WAAA,E,GAuBkBC,WAEM,C,aAzBxB9B,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}